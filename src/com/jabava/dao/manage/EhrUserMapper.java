package com.jabava.dao.manage;

import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;

import com.jabava.pojo.manage.EhrFunctionPoint;
import com.jabava.pojo.manage.EhrPersonField;
import com.jabava.pojo.manage.EhrPersonFieldFixvalue;
import com.jabava.pojo.manage.EhrUser;
import com.jabava.pojo.manage.EhrUserBusinessPower;
import com.jabava.pojo.manage.EhrUserPersonPowerValue;

public interface EhrUserMapper {
	/**
	 * 分页查询用户
	 * @param user
	 * @return
	 */
	List<EhrUser> searchUserPage(Map<String, Object> map);
	
	List<EhrUser> searchUser(Map<String, Object> map);
	
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ehr_user
     *
     * @mbggenerated Wed Dec 16 12:00:52 CST 2015
     */
    int deleteByPrimaryKey(Long userId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ehr_user
     *
     * @mbggenerated Wed Dec 16 12:00:52 CST 2015
     */
    int insert(EhrUser record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ehr_user
     *
     * @mbggenerated Wed Dec 16 12:00:52 CST 2015
     */
    int insertSelective(EhrUser record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ehr_user
     *
     * @mbggenerated Wed Dec 16 12:00:52 CST 2015
     */
    EhrUser selectByPrimaryKey(Long userId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ehr_user
     *
     * @mbggenerated Wed Dec 16 12:00:52 CST 2015
     */
    int updateByPrimaryKeySelective(EhrUser record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ehr_user
     *
     * @mbggenerated Wed Dec 16 12:00:52 CST 2015
     */
    int updateByPrimaryKey(EhrUser record);
    
    EhrUser validateUser(@Param("userCode") String userCode );
    
    int lockUser(@Param("userId") Long userId, @Param("isLock") boolean isLock);
    
    int updateUserloginTime(Long userId);
	
    /**
     * 角色管理-分配人员-已选人员
     * @param companyId
     * @param roleId
     * @return
     */
    List<EhrUser> userSelected(@Param("companyId")Long companyId, @Param("roleId")Long roleId);
    
    /**
     * 角色管理-分配人员-未选人员
     * @param companyId
     * @param roleId
     * @return
     */
    List<EhrUser> userNotSelected(@Param("companyId")Long companyId, @Param("roleId")Long roleId);
	
	/**
     * 用户编号是否存在
     * @param mdl
     * @return
     */
    int isSingleUserCode(EhrUser mdl);
    
    /**
     * 修改密码
     * @param user
     * @return
     */
    int resetPassword(EhrUser user);
    
    /**
     * 把用户设为无效（删除）
     * @param userId
     * @return
     */
    int delById(@Param("userId")Long userId, @Param("isValid")Integer isValid);
    
    /**
     * 权限（字段）
     * @return
     */
    List<EhrPersonField> getPersonFieldList();
    
    /**
     * 权限（字段固定值枚举）
     * @param fieldId
     * @return
     */
    List<EhrPersonFieldFixvalue> getPersonFieldfixvalue(Integer fieldId);
  
    /**
     * 权限（数据权限）
     * @param userId
     * @return
     */
    List<EhrUserBusinessPower> getUserPowerList (Long userId);
    /**
     * 权限（得到PersonFieldId）
     * @param fieldId
     * @return
     */
    EhrPersonField  getPersonFieldId(Integer fieldId);
    
    /**
     * 用户权限值
     * @param userPersonPowerId
     * @return
     */
    List<EhrUserPersonPowerValue> getPersonPowerValue(Long userPersonPowerId);
    /**
     * 权限功能点
     * @return
     */
    List<EhrFunctionPoint> getFunctionPoint();
    
    List<EhrPersonFieldFixvalue>  getPersonFieldSql(@Param("relateSql")String relateSql);
    
    EhrUserBusinessPower selectUserBusinessPower(Long userPersonPowerId);
   
    int deleteUserPersonPowerValue(Long userId);
   
    int deleteUserBusinessPower(Long userId);
   
    int insertBusinessPower(EhrUserBusinessPower businessPower);
   
    int insertPersonPower(EhrUserPersonPowerValue powerValue);
    
    int insertUserPerson(@Param("userId")Long userId, @Param("personId")Long personId);
   
    int insertRoleUser(@Param("userId")Long userId);
    
    Long searchPersonId(@Param("userId")Long userId);
    
    int isDeleteUser(@Param("userId")Long userId, @Param("isDeleted")Integer isDeleted);
    
	int deleteUser(@Param("personId")Long personId, @Param("isDeleted")Integer isDeleted);
    
    EhrUser searchUserByUserCode(String userCode);
    
    Long searchEUserByMobile(String mobile);
    
    Long searchPUserByMobile(String mobile);
    
    EhrUser searchEUserByUserMobile(String mobile);
    
    EhrUser searchPUserByUserMobile(String mobile);
    
    EhrUser searchEUserByUserEmail(String email);
    
    EhrUser searchPUserByUserEmail(String email);
    
    int checkUserPassword(@Param("companyId") Long companyId,@Param("userCode") String userCode,@Param("password") String password);
}