package com.jabava.dao.manage;

import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;

import com.jabava.pojo.manage.EhrBaseData;
import com.jabava.pojo.manage.EhrPerson;
import com.jabava.pojo.manage.EhrPersonField;
import com.jabava.pojo.manage.EhrUserBusinessPower;
import com.jabava.pojo.manage.EhrUserPersonPowerValue;

public interface EhrPersonMapper {
	int countToBecomeMember(@Param("companyId")Long companyId, @Param("daysToBecomeMember")Integer daysToBecomeMember);
	
	int countBirthdayToday(Long companyId);
	
	int countEntryThisMonth(Long companyId);
	
	int countLeaveThisMonth(Long companyId);
	
	int countContractExpiring(@Param("companyId")Long companyId, @Param("daysContractExpiring")Integer daysContractExpiring);
	
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ehr_person
     *
     * @mbggenerated Tue Dec 22 13:34:15 CST 2015
     */
    int deleteByPrimaryKey(Long personId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ehr_person
     *
     * @mbggenerated Tue Dec 22 13:34:15 CST 2015
     */
    int insert(EhrPerson record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ehr_person
     *
     * @mbggenerated Tue Dec 22 13:34:15 CST 2015
     */
    int insertSelective(EhrPerson record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ehr_person
     *
     * @mbggenerated Tue Dec 22 13:34:15 CST 2015
     */
    EhrPerson selectByPrimaryKey(Long personId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ehr_person
     *
     * @mbggenerated Tue Dec 22 13:34:15 CST 2015
     */
    int updateByPrimaryKeySelective(EhrPerson record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ehr_person
     *
     * @mbggenerated Tue Dec 22 13:34:15 CST 2015
     */
    int updateByPrimaryKey(EhrPerson record);
    
    List<EhrPerson> selectAddressPage(Map<String, Object> params);
    
    List<EhrPerson> searchPerson(EhrPerson person);
    
    List<EhrPerson> selectByOrganizationId(Long organizationId);
    
    List<EhrPerson> selectByOrgIdList(List<Long> list);
    
    List<EhrPerson> selectByAuthorisedOrgIdList(List<Long> list);
    
    EhrPerson searchPersonByJobNumber(@Param("companyId")Long companyId, @Param("jobNumber")String jobNumber);
    
    List<EhrPerson> searchBySearch(@Param("companyId")Long companyId, @Param("search")String search);
    
    EhrPerson searchPersonByCertId(@Param("companyId")Long companyId, @Param("certId")String certId);
    
    /***
     * 员工查询
     * @param person
     * @return
     */
    List<Map<String,Object>> searchEhrPersonPage(Map<String,Object> map);
    
    Integer countPerson(EhrPerson person);
    /**
     * Tools里用
     * @param userId
     * @param functionId
     * @return
     */
    List<EhrUserBusinessPower> userBusinessPower(@Param("userId")Long userId, @Param("functionId")int functionId);
    
    EhrPersonField getPersonField(@Param("id")Integer id);
    
    List<EhrUserPersonPowerValue> getPowerValue(@Param("id")Long id);
    
    int deletePerson(Long personId);
    
	int deleteUser(@Param("personId")Long personId);
	
    List<EhrBaseData> searchBaseData();
    
    Long getUserId(@Param("personId") Long personId);
    
    int insertUserPerson(@Param("userId")Long userId, @Param("personId")Long personId);
    
    int insertRoleUser(@Param("userId")Long userId);
    
    int searchPositive(Map<String,Object> map);
    
    int searchContract(Map<String,Object> map);
    
    int searchBirth(Map<String,Object> map);
    
    List<EhrPerson> searchBirthList(Map<String, Object> map);
    
    List<EhrPerson> searchPositiveList(Map<String, Object> map);
    
    List<EhrPerson> getAllPersonCertId(Long companyId);
    
    List<EhrPerson> selectAllPerson(Long companyId);
    
    List<EhrPerson> searchPersonByParam(Map<String,Object> params);
    
    int isDeletePerson(@Param("personId")Long personId, @Param("isDeleted")Integer isDeleted);

    EhrPerson getById(Long personId);

	List<EhrPerson> searchPersonByEmployeeNameAndCompanyId(EhrPerson person);
	
	Long getPersonId(Long userId);
	/**
	 * 根据company_id查询该公司下的所有在职员工(带员工姓名的模糊查询 )
	 * <pre>
	 * @author steven.chen
	 * @date 2016年4月20日 下午3:21:22 
	 * </pre>
	 *
	 * @param ehrPerson
	 * @return
	 */
	public List<EhrPerson>  getEmployeesByCompanyId(EhrPerson ehrPerson);
	/**
	 * 根据身份证号码查询员工信息
	 * <pre>
	 * @author steven.chen
	 * @date 2016年4月20日 下午4:41:29 
	 * </pre>
	 *
	 * @param cardId
	 * @return
	 */
	public  EhrPerson  getEmployeeByCardId(String cardId);
	/**
	 * 获取所有在职的，手机号码不是空的职员工信息
	 * <pre>
	 * @author steven.chen
	 * @date 2016年4月26日 下午1:42:55 
	 * </pre>
	 *
	 * @return
	 */
	public List<EhrPerson> getAllPersonForSync();
	
	/**
	 * 根据身份证号码查询员工信息 ，供微信使用
	 * <pre>
	 * @author steven.chen
	 * @date 2016年4月27日 下午1:58:55 
	 * </pre>
	 *
	 * @param cardId
	 * @return
	 */
	public Map<String,Object> getEmployeeInfoByCardId(String cardId);
	
	/**
	 * 更具身份证号码更新员工信息
	 * @param cardId
	 * @return
	 */
	public Integer updateEmployeeInfoByCardId(EhrPerson person);
	/**
	 * 根据PersonIdList 查询员工列表
	 * <pre>
	 * @author steven.chen
	 * @date 2016年5月24日 上午11:07:36 
	 * </pre>
	 *
	 * @param array
	 * @return
	 */
	public List<EhrPerson> findPersonByIdList(List<Long> list);
	
	/**
	 * 根据N个工号和companyId查询人员列表
	 * @param params
	 * @return
	 */
	public List<EhrPerson> selectByCompanyIdJobNumberList(Map<String, Object> params);

    /** 校验这个邮箱在person 中存在不存在*/
    int fetchEmailCount(@Param("companyId")Long companyId, @Param("email")String email);
    /** 校验这个手机号码在person 中存在不存在*/
    int fetchMobileCount(@Param("companyId")Long companyId, @Param("mobile")String mobile);
    /** 校验这个email在person 中存在不存在*/ 
    int fetchCertIdCount(@Param("companyId")Long companyId, @Param("certId")String certId);
    
    /**
     * 根据personId获取姓名，手机，岗位，部门信息
     * @param personId
     * @return
     */
    List<Map<String, Object>> getBasicPersonInfoByPersonId(Long personId);
}